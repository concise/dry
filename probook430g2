#!/bin/bash

test "${BASH_SOURCE[0]}" = "$0" || {
    echo "Error: '${BASH_SOURCE[0]}' should not be sourced"
    return 1
}

set -o pipefail         # proper status code for a pipeline
set -o errexit          # -e exit when seeing a nonzero status code
set -o nounset          # -u using unbound variable is an error
shopt -s failglob       # pathname expansion failing is an error

__my_exit_trap__ () {
    local LAST_STATUS=$? LAST_COMMAND="$BASH_COMMAND"
    if [[ $LAST_STATUS != 0 ]]
    then
        printf '\nCommand `%s` has nonzero exit status.\n\n' "$LAST_COMMAND"
    fi
}
trap __my_exit_trap__ EXIT

##############################################################################

# make sure we are executing this bash script on the expected machine

test "$(id -u)" = 0
grep -q 'Ubuntu 16.04' /etc/issue
test -e /sys/class/net/enp8s0
grep -q '3c:a8:2a:7f:b2:9d' /sys/class/net/enp8s0/address

##############################################################################

# let the default user be able to sudo easily

echo '#1000 ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/uid-is-1000

##############################################################################

# set up the network interface for sharing Internet connectivity

echo > /etc/network/interfaces '
auto lo
iface lo inet loopback

auto enp8s0
iface enp8s0 inet static
        address 172.25.0.1/24
        post-up  ip address add 172.24.0.1/24 dev enp8s0 label enp8s0:0
        pre-down ip address del 172.24.0.1/24 dev enp8s0 label enp8s0:0
'

ifdown enp8s0
ifup enp8s0

##############################################################################

# set up NAT

echo > /etc/sysctl.conf 'net.ipv4.ip_forward=1'

sysctl -p > /dev/null

[[ "$(< /proc/sys/net/ipv4/ip_forward )" == 1 ]]

if ! dpkg -s iptables-persistent &> /dev/null; then
  debconf-set-selections <<<'iptables-persistent iptables-persistent/autosave_v4 boolean true'
  debconf-set-selections <<<'iptables-persistent iptables-persistent/autosave_v6 boolean true'
  apt-get install -y iptables-persistent
fi

iptables -t nat -F
iptables -t nat -A POSTROUTING -s 172.25.0.0/24 ! -o enp8s0 -j MASQUERADE

service netfilter-persistent save &> /dev/null

##############################################################################

# set up a DHCP server

if ! dpkg -s isc-dhcp-server &> /dev/null; then
  apt-get install -y isc-dhcp-server
fi

echo > /etc/default/isc-dhcp-server 'INTERFACES="enp8s0"'

echo > /etc/dhcp/dhcpd.conf '
default-lease-time 600;
max-lease-time 7200;
option domain-name-servers 8.8.8.8;
subnet 172.25.0.0 netmask 255.255.255.0 {
  range 172.25.0.10 172.25.0.254;
  option routers 172.25.0.1;
}
'

service isc-dhcp-server restart

##############################################################################

# scripts for generate keys and certificates

mkdir -p /cert
chmod go= /cert
cat > /cert/certgen <<'CERTGEN'
#!/bin/bash

test "${BASH_SOURCE[0]}" = "$0" || {
    echo "Error: '${BASH_SOURCE[0]}' should not be sourced"
    return 1
}

set -o pipefail         # proper status code for a pipeline
set -o errexit          # -e exit when seeing a nonzero status code
set -o nounset          # -u using unbound variable is an error
shopt -s failglob       # pathname expansion failing is an error

__my_exit_trap__ () {
    local LAST_STATUS=$? LAST_COMMAND="$BASH_COMMAND"
    if [[ $LAST_STATUS != 0 ]]
    then
        printf '\nCommand `%s` has nonzero exit status.\n\n' "$LAST_COMMAND"
    fi
}
trap __my_exit_trap__ EXIT

##############################################################################

EXE=${BASH_SOURCE[0]}
CTR=0
while [[ -L $EXE ]]; do
        (( ++CTR <= 100 )) || { echo Too many level of symlinks; exit 1; }
        DIR=$( cd -P "$( dirname "$EXE" )" && pwd )
        EXE=$( readlink "$EXE" )
        [[ $EXE = /* ]] || EXE=$DIR/$EXE
done
__DIR__=$( cd -P "$( dirname "$EXE" )" && pwd )
__NAME__=$( basename "$EXE" )
__FILE__=$__DIR__/$__NAME__

mkdir -p "$__DIR__/tmp"
mkdir -p "$__DIR__/out"
cd "$__DIR__/tmp"

##############################################################################

### Make sure you have openssl in your PATH ###

type -a openssl
openssl version

##############################################################################

### Secret key and certificate for root certificate authority ###

if [[ ! -f rootca.key ]]; then
  openssl genrsa -out rootca.key 2048
fi

if [[ ! -f rootca.crt ]]; then
  openssl req -x509 -new -sha256 -days 1000 -subj /CN=rootca/ -key rootca.key -out rootca.crt -config <(cat<<<'
    [ req ]
    distinguished_name = req_distinguished_name
    x509_extensions = extension

    [ req_distinguished_name ]
    commonName = rootca

    [ extension ]
    keyUsage = critical, keyCertSign, cRLSign
    basicConstraints = critical, CA:TRUE
  ')
fi


### Secret key and certificate for intermediate certificate authority ###

if [[ ! -f intermediateca.key ]]; then
  openssl genrsa -out intermediateca.key 2048
fi

if [[ ! -f intermediateca.crt ]]; then
  openssl req -new -sha256 -subj /CN=intermediateca/ -key intermediateca.key -out intermediateca.csr
  openssl x509 -req -days 1000 -CA rootca.crt -CAkey rootca.key -CAcreateserial -in intermediateca.csr -out intermediateca.crt -extensions extension -extfile <(cat<<<'
    [ req ]
    distinguished_name = req_distinguished_name
    x509_extensions = extension

    [ req_distinguished_name ]
    commonName = intermediateca

    [ extension ]
    keyUsage = critical, keyCertSign, cRLSign
    basicConstraints = critical, CA:TRUE, pathlen:0
  ')
  rm intermediateca.csr
fi


### Secret key and certificate for localhost ###

if [[ ! -f localhost.key ]]; then
  openssl genrsa -out localhost.key 2048
fi

openssl req -new -sha256 -subj /CN=localhost/ -key localhost.key -out localhost.csr
openssl x509 -req -days 1000 -CA intermediateca.crt -CAkey intermediateca.key -extensions extension -CAcreateserial -in localhost.csr -out localhost.crt -extfile <(cat<<<'
  [ extension ]
  subjectAltName = DNS:localhost,DNS:example.com,DNS:*.example.com
')
rm localhost.csr


### Certificate chain for localhost ###

cat localhost.crt intermediateca.crt rootca.crt > localhost.crtchain

cp localhost.key localhost.crtchain rootca.crt ../out
CERTGEN
chmod +x /cert/certgen

/cert/certgen

##############################################################################

# set up an nginx Web server

if ! dpkg -s nginx &> /dev/null; then
  apt-get install -y nginx
fi

cat > /nginx.html <<'HTML'
<!doctype html>
<meta charset=utf-8>
<title>MitM 攻擊示範</title>
<meta name=viewport content="width=device-width,initial-scale=1">
<style>
*{color:white}
body{background-color:#aa5555}
h1{font-size:40px;margin-bottom:30px}
p{font-size:20px}
code{background-color:#333333}
</style>
<h1>您的網路連線正遭受威脅</h1>
<div id=msg style=display:none>
<p>您想要訪問 <code id=url></code> 網頁，但是這個網路連線已經被中間人攻擊者所竄改。</p>
<hr>
<p>任何「未加密」的連線都有被「中間人攻擊」的風險。</p>
<p>潛藏網路中的攻擊者可以輕易地「竊聽」或「竄改」網路封包。若兩個節點之間的通訊沒有加密，他們就無法察覺攻擊者的存在。</p>
<hr>
<p>SDN 裡 Switch 與 Controller 之間的通訊如果沒有加密，更容易被攻擊者盯上。</p>
<p>攻擊者只要偽裝自己是 Controller 對 Switch 下達指令，就能輕易地掌控「整個網路」，對該網路中所有的裝置進行更進一步的攻擊。</p>
<p>所以 SDN 設備啟用 TLS 加密是必須的。</p>
<hr>
<p>儘管如此，仍然有許多 SDN 設備，以降低成本、提升效能為藉口，不支援、或者預設情況不啟用 TLS 防護。</p>
</div>
<script>
var msg = document.getElementById('msg');
var url = document.getElementById('url');
url.innerText = location.href;
msg.style.display = '';
</script>
HTML

cat > /etc/nginx/sites-enabled/default <<'NGINX_CONF'
server {
  listen *:80 default_server;
  root /;
  error_page 404 /nginx.html;
  location = / {
    try_files /nginx.html =404;
  }
  location = /nginx.html {
    internal;
  }
  location / {
    return 404;
  }
}
server {
  listen *:443 default_server;
  root /;
  error_page 404 /nginx.html;
  location = / {
    try_files /nginx.html =404;
  }
  location = /nginx.html {
    internal;
  }
  location / {
    return 404;
  }
  ssl on;
  ssl_certificate /cert/out/localhost.crtchain;
  ssl_certificate_key /cert/out/localhost.key;
}
NGINX_CONF

service nginx restart

##############################################################################

# /cert/certgen
# service nginx restart
# service isc-dhcp-server restart
# dhcp-lease-list --lease /var/lib/dhcp/dhcpd.leases
