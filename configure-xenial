#!/bin/bash

set -e

test -n "$BASH_VERSION"
grep -q 'Ubuntu 16.04' /etc/issue
test "$(uname -m)" = x86_64
test "$(id -u)" = 0
wget -q -O /dev/null https://duckduckgo.com/

if dpkg -l ubuntu-desktop &> /dev/null; then
    is_desktop=y
else
    is_desktop=n
fi

TIMESTAMP=$(date +%Y%m%d%H%M%S)
RANDOMSTR=$(dd if=/dev/urandom count=1 bs=2 2> /dev/null | xxd -p)
BACKUPSUFFIX=.$TIMESTAMP.$RANDOMSTR.bak

##############################################################################

while true; do
    read -p 'change time zone to Asia/Taipei? [Y/n] ' ans
    case $ans in
        Y|y|'') change_time_zone_to_taipei=y ;;
        N|n) change_time_zone_to_taipei=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'configure apt to never update/upgrade automatically? [Y/n] ' ans
    case $ans in
        Y|y|'') never_update_upgrade_automatically=y ;;
        N|n) never_update_upgrade_automatically=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    echo '1: http://free.nchc.org.tw/ubuntu/'
    echo '2: http://mirrors.digitalocean.com/ubuntu/'
    echo '3: http://mirrors.linode.com/ubuntu/'
    echo '4: http://security.ubuntu.com/ubuntu/'
    echo '5: http://tw.archive.ubuntu.com/ubuntu/'
    echo '6: http://us.archive.ubuntu.com/ubuntu/'
    echo '7: http://archive.ubuntu.com/ubuntu/'
    read -p 'which mirror do you want to use? (default: 1) [1/2/3/4/5/6/7] ' ans
    case $ans in
        1|'') aptmirror=http://free.nchc.org.tw/ubuntu/ ;;
        2) aptmirror=http://mirrors.digitalocean.com/ubuntu/ ;;
        3) aptmirror=http://mirrors.linode.com/ubuntu/ ;;
        4) aptmirror=http://security.ubuntu.com/ubuntu/ ;;
        5) aptmirror=http://tw.archive.ubuntu.com/ubuntu/ ;;
        6) aptmirror=http://us.archive.ubuntu.com/ubuntu/ ;;
        7) aptmirror=http://archive.ubuntu.com/ubuntu/ ;;
        *) echo 'please answer 1, 2, 3, 4, 5, 6, or 7' ; continue ;;
    esac
    break
done

while true; do
    read -p 'change default text editor to vim? [Y/n] ' ans
    case $ans in
        Y|y|'') set_vim_as_default_text_editor=y ;;
        N|n) set_vim_as_default_text_editor=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'change system vimrc? [Y/n] ' ans
    case $ans in
        Y|y|'') change_system_vimrc=y ;;
        N|n) change_system_vimrc=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'let users in sudo group use sudo without passwords? [Y/n] ' ans
    case $ans in
        Y|y|'') passwordless_sudo_for_sudo_group=y ;;
        N|n) passwordless_sudo_for_sudo_group=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'make capslock key an additional ctrl key? [Y/n] ' ans
    case $ans in
        Y|y|'') capslock_to_ctrl=y ;;
        N|n) capslock_to_ctrl=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'prevent suspending automatically when lid is closed? [Y/n] ' ans
    case $ans in
        Y|y|'') prevent_suspending=y ;;
        N|n) prevent_suspending=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

while true; do
    read -p 'ensure openssh-server is installed? [Y/n] ' ans
    case $ans in
        Y|y|'') ensure_sshd=y ;;
        N|n) ensure_sshd=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

if [[ $ensure_sshd == y ]]; then
    while true; do
        read -p 'change sshd_config? [Y/n] ' ans
        case $ans in
            Y|y|'') change_sshd_config=y ;;
            N|n) change_sshd_config=n ;;
            *) echo 'please answer y or n' ; continue ;;
        esac
        break
    done

    while true; do
        read -p 'disable password ssh login? [y/N] ' ans
        case $ans in
            Y|y) sshd_config_disable_password_authentication=y ;;
            N|n|'') sshd_config_disable_password_authentication=n ;;
            *) echo 'please answer y or n' ; continue ;;
        esac
        break
    done
fi

while true; do
    read -p 'disable IPv6 in kernel? [Y/n] ' ans
    case $ans in
        Y|y|'') disable_ipv6_in_kernel=y ;;
        N|n) disable_ipv6_in_kernel=n ;;
        *) echo 'please answer y or n' ; continue ;;
    esac
    break
done

if [[ $is_desktop == y ]]; then
    while true; do
        read -p 'make grub menu look like the server version? [Y/n] ' ans
        case $ans in
            Y|y|'') server_style_grub_menu=y ;;
            N|n) server_style_grub_menu=n ;;
            *) echo 'please answer y or n' ; continue ;;
        esac
        break
    done

    while true; do
        read -p 'boot into tty1 text console by default? [Y/n] ' ans
        case $ans in
            Y|y|'') boot_to_multi_user_target=y ;;
            N|n) boot_to_multi_user_target=n ;;
            *) echo 'please answer y or n' ; continue ;;
        esac
        break
    done

    while true; do
        read -p 'disable avahi and cups services? [Y/n] ' ans
        case $ans in
            Y|y|'') disable_avahi_cups=y ;;
            N|n) disable_avahi_cups=n ;;
            *) echo 'please answer y or n' ; continue ;;
        esac
        break
    done
fi

##############################################################################

if [[ $change_time_zone_to_taipei == y ]]; then
    timedatectl set-timezone Asia/Taipei
fi

##############################################################################

if [[ $never_update_upgrade_automatically == y ]]; then
    mv /etc/apt/apt.conf.d/{10periodic,.10periodic"$BACKUPSUFFIX"}
    {
        echo 'APT::Periodic::Enable "0";'
        echo 'APT::Periodic::Unattended-Upgrade "0";'
        echo 'APT::Periodic::Update-Package-Lists "0";'
        echo 'APT::Periodic::Download-Upgradeable-Packages "0";'
        echo 'APT::Periodic::AutocleanInterval "0";'
    } > /etc/apt/apt.conf.d/10periodic
fi

##############################################################################

mv /etc/apt/sources.list{,"$BACKUPSUFFIX"}

{
    echo "deb $aptmirror xenial           main restricted universe multiverse"
    echo "deb $aptmirror xenial-updates   main restricted universe multiverse"
    echo "deb $aptmirror xenial-backports main restricted universe multiverse"
    echo "deb $aptmirror xenial-security  main restricted universe multiverse"
} > /etc/apt/sources.list

apt update

##############################################################################

apt full-upgrade -y
apt autoremove -y
apt install -y build-essential gdb git gnupg2 manpages-dev mercurial screen tmux valgrind

##############################################################################

if [[ $set_vim_as_default_text_editor == y ||
      $change_system_vimrc == y ]]; then
    apt install -y vim
fi

if [[ $ensure_sshd == y ]]; then
    apt install -y openssh-server
fi

##############################################################################

if [[ $set_vim_as_default_text_editor == y ]]; then
    update-alternatives --set editor /usr/bin/vim.basic
    {
        echo 'export VISUAL=/usr/bin/vim.basic'
        echo 'export EDITOR=/usr/bin/vim.basic'
        echo 'export SELECTED_EDITOR=/usr/bin/vim.basic'
    } > /etc/profile.d/vim_as_the_default_text_editor.sh
fi

##############################################################################

if [[ $change_system_vimrc == y ]]; then
    mv /etc/vim/vimrc{,"$BACKUPSUFFIX"}
    echo 'se nocp uc=0 vi= nolpl rtp= mls=0 noml hid sc shm+=I kp=:ec bs=2 et ai ci pi sw=4 sts=4 fo=qn tw=78' > /etc/vim/vimrc
fi

##############################################################################

if [[ $passwordless_sudo_for_sudo_group == y ]]; then
    echo '%sudo ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/sudo_without_password
    chmod 0440 /etc/sudoers.d/sudo_without_password
fi

##############################################################################

if [[ $capslock_to_ctrl == y ]]; then
    cp /etc/default/keyboard{,"$BACKUPSUFFIX"}
    sed -i 's@^XKBOPTIONS=.*$@XKBOPTIONS="ctrl:nocaps"@' /etc/default/keyboard
    dpkg-reconfigure --priority=high keyboard-configuration
fi

##############################################################################

if [[ $prevent_suspending == y ]]; then
    cp /etc/systemd/logind.conf{,"$BACKUPSUFFIX"}
    sed -i 's@^#\(HandleLidSwitch\)=.*@\1=ignore@' /etc/systemd/logind.conf
fi

##############################################################################

if [[ $ensure_sshd == y ]]; then
    if [[ $change_sshd_config == y ]]; then
        mv /etc/ssh/sshd_config{,"$BACKUPSUFFIX"}
        {
            echo 'UsePrivilegeSeparation yes'
            echo 'ChallengeResponseAuthentication no'
            echo 'X11Forwarding yes'
            echo 'PrintMotd no'
            echo 'AcceptEnv LANG LC_*'
            echo 'Subsystem sftp /usr/lib/openssh/sftp-server'
            echo 'UsePAM yes'

            echo 'UseDNS no'
        } > /etc/ssh/sshd_config
    fi

    if [[ $sshd_config_disable_password_authentication == y ]]; then
        {
            echo 'PasswordAuthentication no'
        } > /etc/ssh/sshd_config
    fi

    service ssh restart
fi

##############################################################################

if [[ $is_desktop == y ]]; then
    if [[ $boot_to_multi_user_target == y ]]; then
        systemctl set-default multi-user.target
    fi

    if [[ $disable_avahi_cups == y ]]; then
        systemctl disable avahi-daemon.service
        systemctl disable cups.service
        systemctl disable cups-browsed.service
    fi
fi

##############################################################################

if [[ $is_desktop == y && $server_style_grub_menu == y ]] || [[ $disable_ipv6_in_kernel == y ]]; then
    cp /etc/default/grub{,"$BACKUPSUFFIX"}
fi

if [[ $is_desktop == y && $server_style_grub_menu == y ]]; then
    if [[ $server_style_grub_menu == y ]]; then
        mv /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.grub{,"$BACKUPSUFFIX"}
        > /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.grub

        sed -i 's@^\(GRUB_HIDDEN_TIMEOUT=0\)$@#\1@' /etc/default/grub
        sed -i 's@^\(GRUB_TIMEOUT\)=10$@\1=2@' /etc/default/grub
        sed -i 's@^\(GRUB_CMDLINE_LINUX_DEFAULT\)="quiet splash"$@\1=""@' /etc/default/grub
    fi
fi

if [[ $disable_ipv6_in_kernel == y ]]; then
    sed -i 's@^\(GRUB_CMDLINE_LINUX_DEFAULT\)=.*$@\1="ipv6.disable=1"@' /etc/default/grub
fi

if [[ $is_desktop == y && $server_style_grub_menu == y ]] || [[ $disable_ipv6_in_kernel == y ]]; then
    update-grub
fi

##############################################################################

if [[ $ensure_sshd == y ]]; then

for t in rsa ecdsa ed25519; do
    ssh-keyscan -t $t -p 22 127.0.0.1
done 2> /dev/null | cut -d ' ' -f 2,3 > /_this_ssh_host_public_key_info_

echo '
The bash command

  for t in rsa ecdsa ed25519; do
    ssh-keyscan -t $t -p 22 127.0.0.1
  done 2> /dev/null | cut -d " " -f 2,3

produces
'
cat /_this_ssh_host_public_key_info_

echo
echo 'whose MD5 is '"$({ openssl dgst -md5 -binary | xxd -p; } < /_this_ssh_host_public_key_info_)"
echo

echo 'The above host key info is stored in /_this_ssh_host_public_key_info_'

fi
